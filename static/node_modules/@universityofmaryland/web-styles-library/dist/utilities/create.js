import postcss from 'postcss';
import { convertToCSS } from './transform';
export const jssObject = (style) => style;
export const jssObjectFromString = (cssString) => {
    if (!cssString || typeof cssString !== 'string') {
        return {};
    }
    return cssString
        .split(';')
        .filter((style) => style.trim())
        .reduce((acc, declaration) => {
        const [property, value] = declaration.split(':').map((str) => str.trim());
        if (!property || !value) {
            return acc;
        }
        const camelProperty = property.replace(/-([a-z])/g, (g) => g[1].toUpperCase());
        const processedValue = value.match(/^\d+$/)
            ? parseInt(value, 10)
            : value.match(/^\d*\.\d+$/)
                ? parseFloat(value)
                : value;
        return {
            ...acc,
            [camelProperty]: processedValue,
        };
    }, {});
};
export const styleSheetString = async (stylesObject, options = {}) => {
    const cssString = Object.entries(stylesObject)
        .map(([selector, properties]) => {
        if (typeof properties !== 'object' || properties === null) {
            return '';
        }
        const className = selector.startsWith('.')
            ? selector.substring(1)
            : selector;
        const jssObject = {
            className,
            ...properties,
        };
        return convertToCSS(jssObject);
    })
        .filter(Boolean)
        .join('\n\n');
    if (options.prettify) {
        return cssString;
    }
    else {
        const result = await postcss().process(cssString, { from: undefined });
        return result.css
            .replace(/\s*{\s*/g, '{')
            .replace(/\s*}\s*/g, '}')
            .replace(/\s*;\s*/g, ';')
            .replace(/\s*:\s*/g, ':')
            .replace(/,\s+/g, ',')
            .replace(/\s+\(/g, '(')
            .replace(/\(\s+/g, '(')
            .replace(/\s+\)/g, ')')
            .replace(/\)\s+/g, ')')
            .replace(/[\r\n]+/g, '')
            .trim();
    }
};
//# sourceMappingURL=create.js.map