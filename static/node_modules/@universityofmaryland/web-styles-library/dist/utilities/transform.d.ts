import type { JssInputFormat, JssNamedOutputFormat, JssObject } from '../_types';
export interface JssNameConverter {
    (originalObject: JssInputFormat): JssNamedOutputFormat;
}
declare function isPlainObject(value: any): boolean;
declare function createClassSelector(className: string | string[]): string;
declare function combineSelectorWithParent(parentSelector: string, childSelector: string): string;
declare function extractQueryType(query: string): string;
declare function toKebabCase(property: string): string;
declare function formatValue(value: any): string;
declare function isValidQueryCondition(obj: any): boolean;
declare function combineQueryConditions(outerQuery: string, innerQuery: string): string;
declare function createRules(properties: Record<string, any>): string;
declare function createBlock(selector: string, properties: Record<string, any>): string;
declare function processQuery(query: string, selector: string, properties: Record<string, any>): string;
declare function processNestedSelector(baseSelector: string, nestedSelector: string, properties: Record<string, any>): string;
export declare const objectWithName: JssNameConverter;
export declare const processNestedObjects: <T extends object>(obj: T) => JssNamedOutputFormat;
export declare const convertToCSS: (jssObject: JssObject) => string;
export declare const __test__: {
    isPlainObject: typeof isPlainObject;
    toKebabCase: typeof toKebabCase;
    createClassSelector: typeof createClassSelector;
    combineSelectorWithParent: typeof combineSelectorWithParent;
    extractQueryType: typeof extractQueryType;
    formatValue: typeof formatValue;
    isValidQueryCondition: typeof isValidQueryCondition;
    combineQueryConditions: typeof combineQueryConditions;
    createRules: typeof createRules;
    createBlock: typeof createBlock;
    processQuery: typeof processQuery;
    processNestedSelector: typeof processNestedSelector;
};
export {};
//# sourceMappingURL=transform.d.ts.map