import { convertToCSS } from '../transform';
import { jssObject } from '../create';
const media = { queries: { large: { min: 'min-width: 1024px' }, desktop: { min: 'min-width: 1280px' } } };
const spacing = { lg: '24px', xl: '32px' };
const classNamePrefix = 'umd-layout-grid-gap';
describe('Direct Media Query Properties', () => {
    it('should handle direct properties in media queries without self wrapper', () => {
        const base = {
            two: {
                display: 'grid',
                gridTemplateColumns: '1fr'
            }
        };
        const paragraphOverwrite = { '& p': { marginBottom: 0 } };
        const directMediaQuery = jssObject({
            ...base.two,
            [`@media (${media.queries.large.min})`]: {
                gridTemplateColumns: 'repeat(2, 1fr)',
                gridGap: spacing.lg,
                ...paragraphOverwrite,
            },
            [`@media (${media.queries.desktop.min})`]: {
                gridGap: spacing.xl,
            },
            className: [
                `${classNamePrefix}-two`,
                'umd-grid-gap',
            ],
        });
        const result = convertToCSS(directMediaQuery);
        console.log('Direct Media Query CSS Output:');
        console.log(result);
        expect(result).toContain('.umd-layout-grid-gap-two, .umd-grid-gap');
        expect(result).toContain('display: grid');
        expect(result).toContain('grid-template-columns: 1fr');
        expect(result).toContain('@media (min-width: 1024px)');
        expect(result).toContain('grid-template-columns: repeat(2, 1fr)');
        expect(result).toContain('grid-gap: 24px');
        expect(result).toContain('p {');
        expect(result).toContain('margin-bottom: 0');
        expect(result).toContain('@media (min-width: 1280px)');
        expect(result).toContain('grid-gap: 32px');
    });
});
//# sourceMappingURL=direct-media-query.test.js.map