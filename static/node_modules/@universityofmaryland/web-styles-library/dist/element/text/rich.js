import { color, font, spacing } from '../../token';
import { sans } from '../../typography';
import * as animation from '../../animation';
import { create } from '../../utilities';
import * as list from '../list';
import * as table from '../table';
import { code } from './code';
import { quote } from './quote';
const classNamePrefix = 'umd-text-rich';
const scalingContainerMedium = 650;
const themeDarkColors = {
    ...animation.nestedElements.linksDark,
    color: color.white,
    '& *': {
        color: color.white,
    },
};
const childSpacing = {
    marginTop: spacing.md,
    '&:first-child': {
        marginTop: '0',
    },
    '&:empty': {
        marginTop: 0,
    },
};
const simpleBase = {
    ...animation.nestedElements.linksWhite,
    fontSize: font.size.base,
    lineHeight: '1.5em',
    '& > *': {
        fontSize: font.size.base,
        ...childSpacing,
    },
    '& em, & i': {
        fontStyle: 'italic',
    },
    '& strong, & b': {
        FontWeight: font.weight.bold,
    },
    '& u': {
        textDecoration: 'underline',
    },
};
const advancedBase = {
    ...simpleBase,
    fontSize: font.size.lg,
    lineHeight: '1.5em',
    '& > *': {
        fontSize: font.size.lg,
        ...childSpacing,
    },
    [`& p,
    & ul,
    & ol,
    & pre,
    & blockquote`]: {
        maxWidth: '960px',
    },
    '& hr': {
        border: 'none',
        height: '1px',
        backgroundColor: 'currentColor',
    },
    '& img': {
        maxWidth: '100%',
    },
    '& sup': {
        fontSize: font.size.min,
    },
    '& sub': {
        fontSize: font.size.min,
    },
    '& small': {
        ...sans.smaller,
        display: 'inline-block',
    },
};
export const simple = create.jssObject({
    ...simpleBase,
    className: [
        `${classNamePrefix}-simple`,
        `umd-text-simple`,
    ],
});
export const simpleDark = create.jssObject({
    ...simpleBase,
    ...themeDarkColors,
    className: `${classNamePrefix}-simple-dark`,
});
export const simpleLarge = create.jssObject({
    ...simpleBase,
    fontSize: font.size.lg,
    '& > *': {
        fontSize: font.size.lg,
        ...childSpacing,
    },
    className: [
        `${classNamePrefix}-simple-large`,
        `umd-text-simple-large`,
    ],
});
export const simpleLargeDark = create.jssObject({
    ...simpleBase,
    ...themeDarkColors,
    fontSize: font.size.lg,
    '& > *': {
        fontSize: font.size.lg,
        ...childSpacing,
    },
    className: `${classNamePrefix}-simple-large-dark`,
});
export const simpleScaling = create.jssObject({
    ...simpleBase,
    fontSize: font.size.base,
    '& > *': {
        fontSize: font.size.base,
        ...childSpacing,
    },
    [`@container (min-width: ${scalingContainerMedium}px)`]: {
        fontSize: font.size.lg,
        '& > *': {
            fontSize: font.size.lg,
            ...childSpacing,
        },
    },
    className: `${classNamePrefix}-simple-scaling`,
});
export const simpleScalingDark = create.jssObject({
    ...simpleBase,
    ...themeDarkColors,
    fontSize: font.size.base,
    '& > *': {
        fontSize: font.size.base,
        ...childSpacing,
    },
    [`@container (min-width: ${scalingContainerMedium}px)`]: {
        fontSize: font.size.lg,
        '& > *': {
            fontSize: font.size.lg,
            ...childSpacing,
        },
    },
    className: `${classNamePrefix}-simple-scaling-dark`,
});
export const advanced = create.jssObject({
    FontWeight: font.weight.normal,
    ...advancedBase,
    ...code,
    ...quote,
    [`& ul,
    & ol ul`]: {
        ...list.unordered,
    },
    [`& ol,
    & ul ol`]: {
        ...list.ordered,
    },
    '& + ol, &ol + ul': {
        marginTop: spacing.sm,
    },
    '& table': {
        ...table.inline,
    },
    className: [
        `${classNamePrefix}-advanced`,
        `umd-rich-text`,
    ],
});
export const advancedDark = create.jssObject({
    ...advanced,
    ...themeDarkColors,
    className: [
        `${classNamePrefix}-advanced-dark`,
        `umd-rich-text-dark`,
    ],
});
//# sourceMappingURL=rich.js.map