interface AttributeElementProps {
    element: HTMLElement;
    defaultValue?: boolean;
}
interface AttributeProps extends AttributeElementProps {
    attributeName: string;
    attributeValue: string;
}
type AttributeNullProps = Omit<AttributeProps, 'attributeValue'>;
interface DeprecatedAttributeProps extends AttributeElementProps {
    attributeNameOld: string;
    attributeNameNew: string;
    attributeValue: string;
}
declare const includesFeature: {
    readonly animation: (props: AttributeElementProps) => boolean;
    readonly fullScreenOption: (props: AttributeElementProps) => boolean;
    readonly visualTime: (props: AttributeElementProps) => boolean;
    readonly lazyLoad: (props: AttributeElementProps) => boolean;
};
declare const isData: {
    readonly union: (props: AttributeElementProps) => boolean;
};
declare const isDisplay: {
    readonly feature: (props: AttributeElementProps) => boolean;
    readonly featured: (props: AttributeElementProps) => boolean;
    readonly list: (props: AttributeElementProps) => boolean;
    readonly outline: (props: AttributeElementProps) => boolean;
    readonly promo: (props: AttributeElementProps) => boolean;
    readonly primary: (props: AttributeElementProps) => boolean;
    readonly secondary: (props: AttributeElementProps) => boolean;
    readonly statement: (props: AttributeElementProps) => boolean;
    readonly sticky: (props: AttributeElementProps) => boolean;
    readonly stacked: (props: AttributeElementProps) => boolean;
    readonly tabular: (props: AttributeElementProps) => boolean;
};
declare const isInfo: {
    readonly admissions: (props: AttributeElementProps) => boolean;
    readonly events: (props: AttributeElementProps) => boolean;
    readonly news: (props: AttributeElementProps) => boolean;
    readonly schools: (props: AttributeElementProps) => boolean;
    readonly searchDomain: (props: AttributeElementProps) => boolean;
};
declare const hasInfo: {
    gifts: (props: AttributeElementProps) => boolean;
    search: (props: AttributeElementProps) => boolean;
};
declare const isLayout: {
    readonly alertOff: (props: AttributeElementProps) => boolean;
    readonly alignmentRight: (props: AttributeElementProps) => boolean;
    readonly fixed: (props: AttributeElementProps) => boolean;
    readonly fullImage: (props: AttributeElementProps) => boolean;
    readonly hidden: (props: AttributeElementProps) => boolean;
    readonly image: (props: AttributeElementProps) => boolean;
    readonly lockFull: (props: AttributeElementProps) => boolean;
};
declare const isSharing: {
    readonly email: (props: AttributeElementProps) => boolean;
    readonly print: (props: AttributeElementProps) => boolean;
};
declare const includesSharing: {
    readonly facebook: (props: AttributeElementProps) => boolean;
    readonly twitter: (props: AttributeElementProps) => boolean;
};
declare const isTheme: {
    readonly dark: (props: AttributeElementProps) => boolean;
    readonly gold: (props: AttributeElementProps) => boolean;
    readonly light: (props: AttributeElementProps) => boolean;
    readonly maryland: (props: AttributeElementProps) => boolean;
};
declare const isVisual: {
    readonly aligned: (props: AttributeElementProps) => boolean;
    readonly bordered: (props: AttributeElementProps) => boolean;
    readonly list: (props: AttributeElementProps) => boolean;
    readonly icon_seal: (props: AttributeElementProps) => boolean;
    readonly open: (props: AttributeElementProps) => boolean;
    readonly quote: (props: AttributeElementProps) => boolean;
    readonly showIcon: (props: AttributeElementProps) => boolean;
    readonly sizeNormal: (props: AttributeElementProps) => boolean;
    readonly sizeLarge: (props: AttributeElementProps) => boolean;
    readonly stickyFirst: (props: AttributeElementProps) => boolean;
    readonly textCentered: (props: AttributeElementProps) => boolean;
    readonly transparent: (props: AttributeElementProps) => boolean;
};
declare const getValue: {
    readonly alertUrl: ({ element }: AttributeElementProps) => string | null;
    readonly daysToHide: ({ element }: AttributeElementProps) => string | null;
    readonly giftUrl: ({ element }: AttributeElementProps) => string | null;
    readonly layoutLock: ({ element }: AttributeElementProps) => string | null;
    readonly title: ({ element }: AttributeElementProps) => string | null;
    readonly topPosition: ({ element }: AttributeElementProps) => string | null;
    readonly styleProps: (props: AttributeElementProps) => Record<string, any> | undefined;
    readonly url: ({ element }: AttributeElementProps) => string | null;
};
export { includesFeature, isDisplay, isData, isInfo, hasInfo, isLayout, isSharing, includesSharing, isTheme, isVisual, getValue, };
export type { AttributeElementProps, AttributeProps, AttributeNullProps, DeprecatedAttributeProps, };
//# sourceMappingURL=checks.d.ts.map