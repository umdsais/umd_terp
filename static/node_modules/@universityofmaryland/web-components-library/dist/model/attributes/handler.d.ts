export declare namespace AttributeHandlerTypes {
    type Callback<T = ElementRef> = (arg: T, arg2?: any) => void;
    export interface ElementRef {
        element: HTMLElement;
        events?: Record<string, Function>;
    }
    export interface Config {
        name: string;
        handler: (ref: ElementRef, oldValue: string | null, newValue: string | null) => void;
    }
    export interface Props {
        callback: Callback;
        name?: string;
    }
    export {};
}
declare const _default: {
    combine: (...configs: AttributeHandlerTypes.Config[]) => AttributeHandlerTypes.Config[];
    observe: {
        resize: ({ callback, name, }: AttributeHandlerTypes.Props) => AttributeHandlerTypes.Config;
        stateOpen: ({ callback, name, }: AttributeHandlerTypes.Props) => AttributeHandlerTypes.Config;
        stateClosed: ({ callback, name, }: AttributeHandlerTypes.Props) => AttributeHandlerTypes.Config;
        visuallyHide: ({ callback, name, }: AttributeHandlerTypes.Props) => AttributeHandlerTypes.Config;
        visuallyOpen: ({ callback, name, }: AttributeHandlerTypes.Props) => AttributeHandlerTypes.Config;
        visuallyClosed: ({ callback, name, }: AttributeHandlerTypes.Props) => AttributeHandlerTypes.Config;
        visuallyPosition: ({ callback, name, }: AttributeHandlerTypes.Props) => AttributeHandlerTypes.Config;
        visuallyShow: ({ callback, name, }: AttributeHandlerTypes.Props) => AttributeHandlerTypes.Config;
    };
};
export default _default;
//# sourceMappingURL=handler.d.ts.map