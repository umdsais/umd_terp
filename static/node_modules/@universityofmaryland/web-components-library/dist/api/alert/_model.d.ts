import { Model } from 'model';
interface AlertBaseProps {
    headline: HTMLElement | null;
    text: HTMLElement | null;
    actions: HTMLElement | null;
}
interface AlertSiteProps extends AlertBaseProps {
    daysToHide: string;
}
interface AlertPageProps extends AlertBaseProps {
    isThemeLight: boolean;
    isThemeDark: boolean;
    isShowIcon: boolean;
}
interface AlertBannerProps extends AlertBaseProps {
    includeSeal: boolean;
    isThemeDark: boolean;
}
interface AlertProps extends AlertBaseProps {
    isThemeDark: boolean;
    alertUrl: string | null;
}
type AlertRenderer<T> = (props: T) => Model.ElementRef;
interface AlertConfig<T extends AlertBaseProps> {
    tagName: string;
    renderer: AlertRenderer<T>;
    getAdditionalProps?: (element: HTMLElement) => Partial<T>;
}
declare const createAlertComponent: <T extends AlertBaseProps>({ tagName, renderer, getAdditionalProps, }: AlertConfig<T>) => () => void;
export { createAlertComponent, type AlertBaseProps, type AlertSiteProps, type AlertPageProps, type AlertBannerProps, type AlertProps, };
//# sourceMappingURL=_model.d.ts.map